class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res=new ArrayList<>();
        int len=nums.length;
        boolean[] used=new boolean[len];
        Deque<Integer> path=new ArrayDeque<>(len);
        if(len==0){
            return res;
        }
        Arrays.sort(nums);
        dfs(nums,len,0,path,used,res);
        return res;
    }
        private void dfs(int[] nums, int len,int depth,Deque<Integer> path,boolean[] used,List<List<Integer>> res){
            if(depth==len){
                res.add(new ArrayList<>(path));
                return;
            }
            for(int i=0;i<len;i++){
                if(!used[i]){
                    if(i>0 && nums[i-1]==nums[i] && !used[i-1]) continue;
                    path.addLast(nums[i]);
                    used[i]=true;
                    dfs(nums,len,depth+1,path,used,res);
                    used[i]=false;
                    path.removeLast();
                }
            }
        } 
        
    }
Console
