//https://leetcode.com/problems/add-two-numbers-ii/solutions/3776083/java-easy-solution-beats-100
//https://leetcode.com/problems/add-two-numbers-ii/solutions/3777431/java-solved-in-constant-space-algorithm-explained
//reverse first
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        l1=reverseLinkedList(l1);
        l2=reverseLinkedList(l2);
        ListNode dummy=new ListNode(0);
        ListNode temp=dummy;
        int carry=0;
        while(l1!=null || l2!=null ||carry>=1){
            int sum=0;

            if(l1!=null){
                sum+=l1.val;
                l1=l1.next;
            }
            if(l2!=null){
                sum+=l2.val;
                l2=l2.next;
            }

            sum+=carry;
            carry=sum/10;
            ListNode node=new ListNode(sum%10);
            temp.next=node;
            temp=temp.next;

        }
        return reverseLinkedList(dummy.next);
    }
    public ListNode reverseLinkedList(ListNode head){
        ListNode prev = null;
        ListNode curr = head;
        while(curr != null) {
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
    
}

//no reverse
//https://leetcode.com/problems/add-two-numbers-ii/solutions/3776104/java-solution-using-stack
//https://leetcode.com/problems/add-two-numbers-ii/solutions/3777169/follow-up-question-without-reversing-using-stack
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    int c=0;
    Stack<ListNode> makeStack(ListNode l, int k){
        Stack<ListNode> stack = new Stack<>();
        for(ListNode n = l; n!=null; n=n.next, c+=k)
            stack.push(n);
        return stack;
    }
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        Stack<ListNode> stack1 = makeStack(l1,  1);
        Stack<ListNode> stack2 = makeStack(l2, -1);
        if(c<0){ // swapping if l1 is smaller than l2 in length
            ListNode t=l1; l1=l2; l2=t;
            Stack<ListNode> tt= stack1; stack1=stack2; stack2=tt;
        }
        int carry=0;
        while(!stack1.isEmpty()){
            int a=stack1.peek().val, b=(!stack2.isEmpty())? stack2.pop().val: 0;
            stack1.pop().val = (a+b+carry)%10;
            carry=(a+b+carry)/10;
        }
        if(carry==1) return new ListNode(1, l1);
        return l1;
    }
----------------------------------------------------------------
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
    Stack<Integer> s1=new Stack<>();
    Stack<Integer> s2=new Stack<>();

    while(l1!=null){
        s1.push(l1.val);
        l1=l1.next;
    }
    while(l2!=null){
        s2.push(l2.val);
        l2=l2.next;
    }
    int sum=0;
    ListNode list=new ListNode(0);

    while(!s1.isEmpty() || !s2.isEmpty()){
        if(!s1.isEmpty()) sum+=s1.pop();
        if(!s2.isEmpty()) sum+=s2.pop();
        list.val=sum%10;
        ListNode head=new ListNode(sum/10);
        head.next=list;
        list=head;
        sum/=10;

    }
    return list.val==0?list.next:list;
}
}
