/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
 /* Interative */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode res = new ListNode(0); 
        ListNode p1 = res; 
        while (l1 != null && l2!=null ) {
            if(l1.val < l2.val ){ 
                p1.next = l1; 
                l1 = l1.next; 
            }else if (l1.val >= l2.val ) { 
                p1.next = l2; 
                l2 = l2.next; 
            } 
            p1 = p1.next; 
        } 
        p1.next = l1==null? l2:l1;
        return res.next; 
    }
}

 /* Recursive */
 class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if(l1==null && l2==null) return null;
        if(l1==null && l2!=null) return l2;
        if(l2==null && l1!=null) return l1;
        ListNode res=new ListNode();
        if(l1.val<l2.val){
        res=new ListNode(l1.val,mergeTwoLists(l1.next,l2));}
        else if (l1.val>=l2.val){
        res=new ListNode(l2.val,mergeTwoLists(l1,l2.next));}
        return res;
    }
}
