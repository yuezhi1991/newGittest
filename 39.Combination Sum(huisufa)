class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
       List<List<Integer>> res=new ArrayList<>();
       Arrays.sort(candidates);
       Deque<Integer> path=new ArrayDeque<>();
       dfs(path,candidates,target,0,res);
       return res;
    }
        private void dfs(Deque<Integer> path,int[] candidates,int target,int start, List<List<Integer>> res){
            if(target>0){
                for(int i=start;i<candidates.length && target>0;i++){
                    path.addLast(candidates[i]);
                    dfs(path,candidates,target-candidates[i],i,res);
                    path.removeLast();

                }}
            else if (target==0){
                res.add(new ArrayList<>(path));
                return;
            }
            }
        
    }
