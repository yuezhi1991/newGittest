class Solution {
    public List<List<Integer>> permute(int[] nums) {
        int len=nums.length;
        List<List<Integer>> res=new ArrayList<>();
        boolean[] used=new boolean[len];
        Deque<Integer> path=new ArrayDeque<>(len);
        if(len==0){
            return null;
        }
        dfs(nums,len,0,used,path,res);
        return res;
    }
        private void dfs(int[] nums, int len, int depth, boolean[] used, Deque<Integer> path, List<List<Integer>> res){
            if(depth==len){
                res.add(new ArrayList<>(path));
                return;
            }

            for(int i=0;i<len;i++){
                if(!used[i]){
                    used[i]=true;
                    path.addLast(nums[i]);
                    dfs(nums,len,depth+1,used,path,res);
                    path.removeLast();
                    used[i]=false;

                }
            }

        }
    }
